/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm_parser.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
               
                        
                                        
    OUTPUT_DIRECTORY = "src/jjt";
}

PARSER_BEGIN(jmm_parser)

package jjt;

// c\u00f3digo Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class jmm_parser/*@bgen(jjtree)*/implements jmm_parserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTjmm_parserState jjtree = new JJTjmm_parserState();

/*@egen*/


  public static void error_skipto(int kind){
      ParseException e = generateParseException();
      System.out.println(e.toString());
      Token t;

      do{

          t = getToken(1);

          if(t.kind == kind)
            return;

          t = getNextToken();
      } while(t.kind != kind);
  }

}

PARSER_END(jmm_parser)

    // s\u00edmbolos que n\u00e3o devem ser considerados na an\u00e1lise
    SKIP : {" " | "\t" | "\r" | "\n"}

    SKIP :
    {   
        < "//" (~["\r", "\n"])* >
        |              
        < "/*" > : ML_COMMENT_STATE
    }

    <ML_COMMENT_STATE> SKIP :   
    {
        < "*/" > : DEFAULT
        |
        < ~[] >   
    }

           // defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais)
TOKEN : {
        <  INTEGER:  <DECIMAL_LITERAL> (["l","L"])?
                                | <HEX_LITERAL> (["l","L"])?
                                | <OCTAL_LITERAL> (["l","L"])? >
                                | < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
                                | < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
                                | < #OCTAL_LITERAL: "0" (["0"-"7"])* >
        |   < CLASS: "class" >
        |   < EXTENDS: "extends" >
        |   < TYPEINT: "int" >
        |   < TYPESTRING: "String" >
        |   < TYPEBOOLEAN: "boolean" >
        |   < PUBLIC: "public" >
        |   < STATIC: "static" >
        |   < VOID: "void" >
        |   < MAIN: "main" >
        |   < RETURN: "return">
        |   < IF: "if" >
        |   < ELSE: "else" >
        |   < WHILE: "while" >
        |   < EQUAL: "=" >
        |   < TRUE: "true">
        |   < LENGTH: "length">
        |   < FALSE: "false">
        |   < THIS: "this">
        |   < NEW: "new">
        |   < SMALLERSIGN: "<" >
        |   < PLUSSIGN: "+">
        |   < MINUSIGN: "-">
        |   < TIMESSIGN: "*">
        |   < DIVIDESIGN: "/">
        |   < LOGICAND: "&&" >
        |   < LOGICNOT: "!">
        |   < OPENCURLYBRACKET: "{" >
        |   < CLOSECURLYBRACKET: "}" >
        |   < OPENBRACKET: "[" >
        |   < CLOSEBRACKET: "]" >
        |   < SEMICOLON: ";" >
        |   < PARENTHESISOPEN: "(" >
        |   < PARENTHESISCLOSE: ")" >
        |   < COMMA: "," >
        |   < POINT: "." >
        |   < IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "_", "$", "0"-"9"])* >
        }


SimpleNode ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                                 ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    < CLASS > t1=< IDENTIFIER >{jjtn000.name=t1.image;} [< EXTENDS > < IDENTIFIER >] <OPENCURLYBRACKET>
    
    ( VarDeclaration() )*
    ( PublicFunction() )*
    
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PublicFunction()       : {}{

    <PUBLIC> (Type() MethodDeclaration() | <STATIC> MainDeclaration())

}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    t1 = <IDENTIFIER> {jjtn000.name = t1.image;} 
        <PARENTHESISOPEN>
            Arguments()
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
        Return()
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) MainDeclaration */
    try {
/*@egen*/
    <VOID> <MAIN> 
        <PARENTHESISOPEN>
            <TYPESTRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER>
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Return() : {/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Return */
        try {
/*@egen*/
        <RETURN> Expression() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Arguments() : {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    [ Argument() ( <COMMA> Argument() )*]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    Type() t1 = <IDENTIFIER>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.jjtSetLastToken(getToken(0));
                             }
/*@egen*/ {jjtn000.name = t1.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void FunctionBody() : {/*@bgen(jjtree) FunctionBody */
  ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) FunctionBody */
    try {
/*@egen*/
    ( LOOKAHEAD(2) VarDeclaration())*
    (Statement())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <TYPEBOOLEAN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ { jjtn000.name = "Boolean"; } 
    | <TYPEINT> { jjtn000.name = "int"; } [<OPENBRACKET> <CLOSEBRACKET> { jjtn000.name = "int[]"; } ] 
    | t1 = <IDENTIFIER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ { jjtn000.name = t1.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) VarDeclaration */
        try {
/*@egen*/
        Type() t1=<IDENTIFIER>{jjtn000.name = t1.image;} <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void Statement()       : {} {
 
    <OPENCURLYBRACKET>
        ( Statement() )*
    <CLOSECURLYBRACKET>
    |   
    If()
    Else()
    |
    While()
    |
    IdentifierAssignment()
    |
    ExpressionNoIdent() <SEMICOLON>
}

void ExpressionNoIdent()       : {Token t1;} {
    (
        ( t1 = <INTEGER>/*@bgen(jjtree) Integer */
                         {
                           ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
/*@egen*/ {jjtn001.name = t1.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/         )
        |   
        ( t1 = <TRUE>/*@bgen(jjtree) Bool */
                      {
                        ASTBool jjtn002 = new ASTBool(JJTBOOL);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn002.name = t1.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/       )
        |
        ( t1 = <FALSE>/*@bgen(jjtree) Bool */
                       {
                         ASTBool jjtn003 = new ASTBool(JJTBOOL);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtn003.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                         jjtn003.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn003.name = t1.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtn003.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/      )
        |   
        ( t1 = <THIS>/*@bgen(jjtree) This_ */
                      {
                        ASTThis_ jjtn004 = new ASTThis_(JJTTHIS_);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn004.name = t1.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004, true);
                          jjtn004.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/        )
        |   
        ( NewObject() )
        |   
        ( t1 = <LOGICNOT> Expression()/*@bgen(jjtree) not */
                                       {
                                         ASTnot jjtn005 = new ASTnot(JJTNOT);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
                                         jjtn005.jjtSetFirstToken(getToken(1));
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn005, true);
                                         jjtc005 = false;
                                         jjtn005.jjtSetLastToken(getToken(0));
                                       }
/*@egen*/ {jjtn005.name = t1.image;}/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005, true);
                                           jjtn005.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/     )
        |   
        <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
    )   
    ExpressionRight() Operator1()
}

void IdentifierAssignment()        : {}{
    Ident()
    (
        (<EQUAL>/*@bgen(jjtree) #Equal( 2) */
                 {
                   ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/           <SEMICOLON>)
        | 
        (ExpressionRight() Operator1() <SEMICOLON>)
    )
}

void Operator1()       : {}{
    Operator2()
    (
    <LOGICAND>/*@bgen(jjtree) #And( 2) */
               {
                 ASTAnd jjtn001 = new ASTAnd(JJTAND);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtn001.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/ SecondLevelPrecedence()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                   jjtn001.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/        
    )*
}
void Operator2()        : {}{
    Operator3()
    (
    <SMALLERSIGN>/*@bgen(jjtree) #LessThan( 2) */
                  {
                    ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ ThirdLevelPrecedence()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/             
    )*
}

void Operator3()       : {}{
    Operator4()
    (
        <PLUSSIGN>/*@bgen(jjtree) #Add( 2) */
                   {
                     ASTAdd jjtn001 = new ASTAdd(JJTADD);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ FourthLevelPrecedence()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/        
        |
        <MINUSIGN>/*@bgen(jjtree) #Sub( 2) */
                   {
                     ASTSub jjtn002 = new ASTSub(JJTSUB);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ FourthLevelPrecedence()/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/        
    )*
}

void Operator4()       : {}{
    (
        <TIMESSIGN>/*@bgen(jjtree) #Mult( 2) */
                     {
                       ASTMult jjtn001 = new ASTMult(JJTMULT);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/  PrecedenceTerminals()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/         
        |
        <DIVIDESIGN>/*@bgen(jjtree) #Div( 2) */
                     {
                       ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                       jjtn002.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ PrecedenceTerminals()/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                         jjtn002.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/        
    )*
}


void Ident()       : {} {
     Identifier() ( PositionAccess() | Empty()) 
}

void Identifier()       : {/*@bgen(jjtree) Term */
                           ASTTerm jjtn000 = new ASTTerm(JJTTERM);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}{/*@bgen(jjtree) Term */
    try {
/*@egen*/
    t1 = <IDENTIFIER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn000.name = t1.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF>
        <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
            Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Else() : {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Else */
    try {
/*@egen*/
    <ELSE>

        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
                ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}{/*@bgen(jjtree) While */
    try {
/*@egen*/

    <WHILE>
        <PARENTHESISOPEN>
        { try{
            Expression();
        } catch(ParseException e){
            error_skipto(PARENTHESISCLOSE);
        }
        }
        <PARENTHESISCLOSE>
        
        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void Expression()       : {} 
{
        ExpressionPrecedence()
}


void ExpressionPrecedence()      : {}
{
    SecondLevelPrecedence() 
    (
        LOOKAHEAD(2)
        <LOGICAND>/*@bgen(jjtree) #And( 2) */
                   {
                     ASTAnd jjtn001 = new ASTAnd(JJTAND);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ SecondLevelPrecedence()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/        
    )*
}

void SecondLevelPrecedence()       : {}
{
    ThirdLevelPrecedence() 
    ( 
        LOOKAHEAD(2)
        <SMALLERSIGN>/*@bgen(jjtree) #LessThan( 2) */
                      {
                        ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*/ ThirdLevelPrecedence()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtn001.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/             
    )*
}

void ThirdLevelPrecedence()       :  {}
{
    FourthLevelPrecedence()
    (
        LOOKAHEAD(2)
        (
            <PLUSSIGN>/*@bgen(jjtree) #Add( 2) */
                       {
                         ASTAdd jjtn001 = new ASTAdd(JJTADD);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/ FourthLevelPrecedence()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/         
            |
            <MINUSIGN>/*@bgen(jjtree) #Sub( 2) */
                       {
                         ASTSub jjtn002 = new ASTSub(JJTSUB);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/ FourthLevelPrecedence()/*@bgen(jjtree)*/
                       } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           throw (RuntimeException)jjte002;
                         }
                         if (jjte002 instanceof ParseException) {
                           throw (ParseException)jjte002;
                         }
                         throw (Error)jjte002;
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/         
        )
    )*
}

void FourthLevelPrecedence()       : {Token t1;}
{
    PrecedenceTerminals()
    (   

        LOOKAHEAD(2)
        (
            <TIMESSIGN>/*@bgen(jjtree) #Mult( 2) */
                         {
                           ASTMult jjtn001 = new ASTMult(JJTMULT);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/  PrecedenceTerminals()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/         
            |
            <DIVIDESIGN>/*@bgen(jjtree) #Div( 2) */
                         {
                           ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                           jjtn002.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ PrecedenceTerminals()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                             jjtn002.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/         
        )
    )*
}

void PrecedenceTerminals()       : {Token t1;}
{
    (
        ( t1 = <INTEGER>/*@bgen(jjtree) Integer */
                         {
                           ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
/*@egen*/ {jjtn001.name = t1.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/         )
        |   
        ( t1 = <TRUE>/*@bgen(jjtree) Bool */
                      {
                        ASTBool jjtn002 = new ASTBool(JJTBOOL);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn002.name = t1.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/       )
        |
        ( t1 = <FALSE>/*@bgen(jjtree) Bool */
                       {
                         ASTBool jjtn003 = new ASTBool(JJTBOOL);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtn003.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                         jjtn003.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn003.name = t1.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtn003.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/      )
        |   
        ( t1 = <THIS>/*@bgen(jjtree) This_ */
                      {
                        ASTThis_ jjtn004 = new ASTThis_(JJTTHIS_);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn004.name = t1.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004, true);
                          jjtn004.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/        )
        |   
        ( NewObject() )
        |   
        ( t1 = <LOGICNOT> Expression()/*@bgen(jjtree) Not */
                                       {
                                         ASTNot jjtn005 = new ASTNot(JJTNOT);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
                                         jjtn005.jjtSetFirstToken(getToken(1));
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn005, true);
                                         jjtc005 = false;
                                         jjtn005.jjtSetLastToken(getToken(0));
                                       }
/*@egen*/ {jjtn005.name = t1.image;}/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005, true);
                                           jjtn005.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/     )
        |
        Identifier()
        |   
        <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
    )   
    ExpressionRight()
    
}

void ExpressionRight()      : {Token t1;}
{

    t1 = <POINT>/*@bgen(jjtree) #Point( 2) */
                 {
                   ASTPoint jjtn001 = new ASTPoint(JJTPOINT);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ ( ObjectAttr() | Length() )/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/           ExpressionRight() 
    | 
    PositionAccess()  ExpressionRight()
    | 
    Empty()
}


void PositionAccess()       : {} {
    <OPENBRACKET>/*@bgen(jjtree) #Position( 2) */
                   {
                     ASTPosition jjtn001 = new ASTPosition(JJTPOSITION);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/  Expression()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/              <CLOSEBRACKET>  
}

void NewObject()       : {Token t1;} {
    <NEW>
    (    
        ((t1 = <TYPEINT>/*@bgen(jjtree) Integer */
                         {
                           ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
/*@egen*/ {jjtn001.name = t1.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/         ) <OPENBRACKET> Expression()/*@bgen(jjtree) #New( 2) */
                                                                                         {
                                                                                           ASTNew jjtn002 = new ASTNew(JJTNEW);
                                                                                           boolean jjtc002 = true;
                                                                                           jjtree.openNodeScope(jjtn002);
                                                                                           jjtn002.jjtSetFirstToken(getToken(1));
                                                                                         }
                                                                                         try {
/*@egen*/ <CLOSEBRACKET>/*@bgen(jjtree)*/
                                                                                         } finally {
                                                                                           if (jjtc002) {
                                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                                             jjtn002.jjtSetLastToken(getToken(0));
                                                                                           }
                                                                                         }
/*@egen*/        )
        | 
        (Identifier() <PARENTHESISOPEN>/*@bgen(jjtree) #New( 1) */
                                        {
                                          ASTNew jjtn003 = new ASTNew(JJTNEW);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
                                          jjtn003.jjtSetFirstToken(getToken(1));
                                        }
                                        try {
/*@egen*/ <PARENTHESISCLOSE>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003,  1);
                                            jjtn003.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/        )
    )
}

void ObjectAttr(): {/*@bgen(jjtree) ObjectAttr */
                    ASTObjectAttr jjtn000 = new ASTObjectAttr(JJTOBJECTATTR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) ObjectAttr */
    try {
/*@egen*/
    t1 = <IDENTIFIER> {jjtn000.name = t1.image;}
    <PARENTHESISOPEN>
        ( Expression() ( <COMMA> Expression() ) * )?
    <PARENTHESISCLOSE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Length() : {/*@bgen(jjtree) Length */
  ASTLength jjtn000 = new ASTLength(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Length */
    try {
/*@egen*/
    <LENGTH>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Empty()      : {} {
    {}
}