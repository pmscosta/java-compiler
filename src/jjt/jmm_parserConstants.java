/* Generated By:JJTree&JavaCC: Do not edit this line. jmm_parserConstants.java */
package jjt;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface jmm_parserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 9;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 10;
  /** RegularExpression Id. */
  int HEX_LITERAL = 11;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 12;
  /** RegularExpression Id. */
  int CLASS = 13;
  /** RegularExpression Id. */
  int EXTENDS = 14;
  /** RegularExpression Id. */
  int TYPEINT = 15;
  /** RegularExpression Id. */
  int TYPESTRING = 16;
  /** RegularExpression Id. */
  int TYPEBOOLEAN = 17;
  /** RegularExpression Id. */
  int PUBLIC = 18;
  /** RegularExpression Id. */
  int STATIC = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int MAIN = 21;
  /** RegularExpression Id. */
  int RETURN = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int WHILE = 25;
  /** RegularExpression Id. */
  int EQUAL = 26;
  /** RegularExpression Id. */
  int TRUE = 27;
  /** RegularExpression Id. */
  int LENGTH = 28;
  /** RegularExpression Id. */
  int FALSE = 29;
  /** RegularExpression Id. */
  int THIS = 30;
  /** RegularExpression Id. */
  int NEW = 31;
  /** RegularExpression Id. */
  int SMALLERSIGN = 32;
  /** RegularExpression Id. */
  int PLUSSIGN = 33;
  /** RegularExpression Id. */
  int MINUSIGN = 34;
  /** RegularExpression Id. */
  int TIMESSIGN = 35;
  /** RegularExpression Id. */
  int DIVIDESIGN = 36;
  /** RegularExpression Id. */
  int LOGICAND = 37;
  /** RegularExpression Id. */
  int LOGICNOT = 38;
  /** RegularExpression Id. */
  int OPENCURLYBRACKET = 39;
  /** RegularExpression Id. */
  int CLOSECURLYBRACKET = 40;
  /** RegularExpression Id. */
  int OPENBRACKET = 41;
  /** RegularExpression Id. */
  int CLOSEBRACKET = 42;
  /** RegularExpression Id. */
  int SEMICOLON = 43;
  /** RegularExpression Id. */
  int PARENTHESISOPEN = 44;
  /** RegularExpression Id. */
  int PARENTHESISCLOSE = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int POINT = 47;
  /** RegularExpression Id. */
  int IDENTIFIER = 48;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "<INTEGER>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"class\"",
    "\"extends\"",
    "\"int\"",
    "\"String\"",
    "\"boolean\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"return\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"=\"",
    "\"true\"",
    "\"length\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"<\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"!\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\".\"",
    "<IDENTIFIER>",
  };

}
