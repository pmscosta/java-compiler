PARSER_BEGIN(JavaMM)
// código Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public
class JavaMM {
public
  static void main(String args[]) throws ParseException {
    // criação do objecto utilizando o constructor com argumento para

    int size = args.length;
    String fileName = args[size - 1];
    FileInputStream file;

    try {
      file = new FileInputStream(fileName);
      JavaMM parser = new JavaMM(file);
      parser.ClassDeclaration();
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  // luiscubal@fe.up.pt
}

PARSER_END(JavaMM)

    // símbolos que não devem ser considerados na análise
    SKIP : {" " | "\t" | "\r" | "\n"}

           // definição dos tokens (símbolos terminais)
TOKEN : {
        <   INTEGER : (["0" - "9"])+ >
        |   < ARSym : (["+", "-"]) >
        |   < CLASS: "class" >
        |   < EXTENDS: "extends" >
        |   < TYPEINT: "int" >
        |   < TYPEBOOLEAN: "boolean" >
        |   < PUBLIC: "public" >
        |   < STATIC: "static" >
        |   < VOID: "void" >
        |   < RETURN: "return">
        |   < OPENCURLYBRACKET: "{" >
        |   < CLOSECURLYBRACKET: "}" >
        |   < OPENBRACKET: "[" >
        |   < CLOSEBRACKET: "]" >
        |   < SEMICOLON: ";" >
        |   < PARENTHESISOPEN: "(" >
        |   < PARENTHESISCLOSE: ")" >
        |   < COMMA: "," >
        |   < IDENTIFIER: (["a"-"z", "A"-"Z", "_", "$"])(["a"-"z", "A"-"Z", "_", "$", "0"-"9"])* >
        }

// definição da produção
void Aritm() : { Token t1; }
{
  t1 = <IDENTIFIER> { System.out.println("T1 =" + t1.image); }
}

void ClassDeclaration() : {} {
    < CLASS > < IDENTIFIER > [< EXTENDS > < IDENTIFIER >] <OPENCURLYBRACKET>

    ( VarDeclaration() )*
    ( MethodDeclaration() )*

    <CLOSECURLYBRACKET>
}

void Type() : {} {
    <TYPEBOOLEAN> | <TYPEINT> [<OPENBRACKET> <CLOSEBRACKET>] | <IDENTIFIER>
}

void VarDeclaration() : {} {
        Type() <IDENTIFIER> <SEMICOLON>
}

void MethodDeclaration() : {} {
    <PUBLIC> Type() <IDENTIFIER> 
        <PARENTHESISOPEN>
            [ Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )*]
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        (VarDeclaration())*
        <RETURN> <SEMICOLON>
    <CLOSECURLYBRACKET>
}

void MainDeclaration() : {} {
    <PUBLIC> Type() <IDENTIFIER> 
        <PARENTHESISOPEN>
            [ Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )*]
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        (VarDeclaration())*
        <RETURN> <SEMICOLON>
    <CLOSECURLYBRACKET>
}