/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JavaMM.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
               
                        
}

PARSER_BEGIN(JavaMM)
// c\u00f3digo Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public
class JavaMM/*@bgen(jjtree)*/implements JavaMMTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJavaMMState jjtree = new JJTJavaMMState();

/*@egen*/
public
  static void main(String args[]) throws ParseException {
    // cria\u00e7\u00e3o do objecto utilizando o constructor com argumento para

    int size = args.length;
    String fileName = args[size - 1];
    FileInputStream file;

    try {
      file = new FileInputStream(fileName);
      JavaMM parser = new JavaMM(file);
      SimpleNode root = parser.ClassDeclaration();
      reorganizetree(root);
      root.dump("");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  public static void reorganizetree(SimpleNode node){

    if(node instanceof ASTOperator){

        System.out.println("yo");


        SimpleNode left_term = (SimpleNode) node.jjtGetParent();

        if(left_term.jjtGetNumChildren() == 2){

        System.out.println(left_term.jjtGetNumChildren());

        SimpleNode right_term = (SimpleNode) left_term.jjtGetChild(1);

        left_term.jjtRemoveChild(0);

        left_term.jjtRemoveChild(0);

        Node expr =  left_term.jjtGetParent();

        expr.jjtAddChild(node, 1);

        expr.jjtAddChild(right_term, 2);
        }
    }

    if(node.children != null){
        for(int i = 0; i < node.jjtGetNumChildren(); i++){
            SimpleNode n = (SimpleNode) node.jjtGetChild(i);
            reorganizetree(n);
        }
    }

  }

  public static void error_skipto(int kind){
      ParseException e = generateParseException();
      System.out.println(e.toString());
      Token t;

      do{

          t = getToken(1);

          if(t.kind == kind)
            return;

          t = getNextToken();
      } while(t.kind != kind);
  }

}

PARSER_END(JavaMM)

    // s\u00edmbolos que n\u00e3o devem ser considerados na an\u00e1lise
    SKIP : {" " | "\t" | "\r" | "\n"}

           // defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais)
TOKEN : {
        <  INTEGER:  <DECIMAL_LITERAL> (["l","L"])?
                                | <HEX_LITERAL> (["l","L"])?
                                | <OCTAL_LITERAL> (["l","L"])? >
                                | < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
                                | < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
                                | < #OCTAL_LITERAL: "0" (["0"-"7"])* >
        |   < CLASS: "class" >
        |   < EXTENDS: "extends" >
        |   < TYPEINT: "int" >
        |   < TYPESTRING: "String" >
        |   < TYPEBOOLEAN: "boolean" >
        |   < PUBLIC: "public" >
        |   < STATIC: "static" >
        |   < VOID: "void" >
        |   < MAIN: "main" >
        |   < RETURN: "return">
        |   < IF: "if" >
        |   < ELSE: "else" >
        |   < WHILE: "while" >
        |   < EQUAL: "=" >
        |   < TRUE: "true">
        |   < LENGTH: "length">
        |   < FALSE: "false">
        |   < THIS: "this">
        |   < NEW: "new">
        |   < SMALLERSIGN: "<" >
        |   < PLUSSIGN: "+">
        |   < MINUSIGN: "-">
        |   < TIMESSIGN: "*">
        |   < DIVIDESIGN: "/">
        |   < LOGICAND: "&&" >
        |   < LOGICNOT: "!">
        |   < OPENCURLYBRACKET: "{" >
        |   < CLOSECURLYBRACKET: "}" >
        |   < OPENBRACKET: "[" >
        |   < CLOSEBRACKET: "]" >
        |   < SEMICOLON: ";" >
        |   < PARENTHESISOPEN: "(" >
        |   < PARENTHESISCLOSE: ")" >
        |   < COMMA: "," >
        |   < POINT: "." >
        |   < IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "_", "$", "0"-"9"])* >
        }


SimpleNode ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                                 ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    < CLASS > t1=< IDENTIFIER >{jjtn000.name=t1.image;} [< EXTENDS > < IDENTIFIER >] <OPENCURLYBRACKET>
    
    ( VarDeclaration() )*
    ( PublicFunction() )*
    
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PublicFunction()       : {}{

    <PUBLIC> (Type() MethodDeclaration() | <STATIC> MainDeclaration())

}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    t1 = <IDENTIFIER> {jjtn000.name = t1.image;} 
        <PARENTHESISOPEN>
            Arguments()
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
        Return()
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) MainDeclaration */
    try {
/*@egen*/
    <VOID> <MAIN> 
        <PARENTHESISOPEN>
            <TYPESTRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER>
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Return() : {/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Return */
        try {
/*@egen*/
        <RETURN> Expression() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Arguments() : {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    [ Argument() ( <COMMA> Argument() )*]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    Type() t1 = <IDENTIFIER>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.jjtSetLastToken(getToken(0));
                             }
/*@egen*/ {jjtn000.name = t1.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void FunctionBody() : {/*@bgen(jjtree) FunctionBody */
  ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) FunctionBody */
    try {
/*@egen*/
    ( LOOKAHEAD(2) VarDeclaration())*
    (Statement())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <TYPEBOOLEAN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ { jjtn000.type = "Boolean"; } 
    | <TYPEINT> { jjtn000.type = "int"; } [<OPENBRACKET> <CLOSEBRACKET> { jjtn000.type = "int[]"; } ] 
    | t1 = <IDENTIFIER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ { jjtn000.type = t1.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) VarDeclaration */
        try {
/*@egen*/
        Type() t1=<IDENTIFIER>{jjtn000.identifier = t1.image;} <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void Statement()       : {} {
 
    <OPENCURLYBRACKET>
        ( Statement() )*
    <CLOSECURLYBRACKET>
    |   
    If()
    Else()
    |
    While()
    |
    ExpressionSubset() <SEMICOLON>
    |
    Assignment()
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF>
        <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
            Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Else() : {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Else */
    try {
/*@egen*/
    <ELSE>

        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Assignment() : {/*@bgen(jjtree) Assignment */
                     ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}{/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    t1 = <IDENTIFIER> {jjtn000.name = t1.image;} ( IdentifierStmt() )? <SEMICOLON>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
                ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}{/*@bgen(jjtree) While */
    try {
/*@egen*/

    <WHILE>
        <PARENTHESISOPEN>
        { try{
            Expression();
        } catch(ParseException e){
            error_skipto(PARENTHESISCLOSE);
        }
        }
        <PARENTHESISCLOSE>
        
        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void IdentifierStmt()       : {} {
    ExpressionLeftSubset()  
    | 
    PositionAccess() (AssignmentLeft() 
    | 
    ExpressionLeft())  
    | 
    AssignmentLeft() 
}

void PositionAccess() : {/*@bgen(jjtree) PositionAccess */
                         ASTPositionAccess jjtn000 = new ASTPositionAccess(JJTPOSITIONACCESS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) PositionAccess */
    try {
/*@egen*/
    <OPENBRACKET> Expression() <CLOSEBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void AssignmentLeft(): {/*@bgen(jjtree) AssignmentLeft */
  ASTAssignmentLeft jjtn000 = new ASTAssignmentLeft(JJTASSIGNMENTLEFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) AssignmentLeft */
    try {
/*@egen*/
    <EQUAL> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}




void NewObject(): {/*@bgen(jjtree) NewObject */
                   ASTNewObject jjtn000 = new ASTNewObject(JJTNEWOBJECT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) NewObject */
    try {
/*@egen*/
    
    (
    t1 = <TYPEINT> <OPENBRACKET> Expression() <CLOSEBRACKET>
    | 
    t1 = <IDENTIFIER> <PARENTHESISOPEN> <PARENTHESISCLOSE> 
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{jjtn000.name = t1.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ObjectAttr(): {/*@bgen(jjtree) ObjectAttr */
                    ASTObjectAttr jjtn000 = new ASTObjectAttr(JJTOBJECTATTR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) ObjectAttr */
    try {
/*@egen*/
    t1 = <IDENTIFIER> {jjtn000.name = t1.image;}
    <PARENTHESISOPEN>
        ( Expression() ( <COMMA> Expression() ) * )?
    <PARENTHESISCLOSE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void Expression()       : {} 
{
        ExpressionSubset() |   ExpressionIdent()
}

void ExpressionIdent() : {/*@bgen(jjtree) ExpressionIdent */
                          ASTExpressionIdent jjtn000 = new ASTExpressionIdent(JJTEXPRESSIONIDENT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}{/*@bgen(jjtree) ExpressionIdent */
        try {
/*@egen*/
        t1 = <IDENTIFIER> {jjtn000.name = t1.image;} ExpressionLeft()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ExpressionSubset() : {/*@bgen(jjtree) ExpressionSubset */
                           ASTExpressionSubset jjtn000 = new ASTExpressionSubset(JJTEXPRESSIONSUBSET);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) ExpressionSubset */
    try {
/*@egen*/
    (
    t1 = <INTEGER> ExpressionLeft()
    |   
    t1 = <TRUE> ExpressionLeft()
    |
    t1 = <FALSE> ExpressionLeft()
    |   
    t1 = <THIS> ExpressionLeft()
    |   
    t1 = <NEW> NewObject() ExpressionLeft()
    |   
    t1 = <LOGICNOT> Expression() ExpressionLeft() )/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
/*@egen*/{ jjtn000.name = t1.image;}
    |   
    <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE> ExpressionLeft()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void ExpressionLeft()      : {}
{
    ExpressionLeftSubset()
    | PositionAccess()  ExpressionLeft()
    | Empty()
}

void ExpressionLeftSubset()      : {} {
    Operator() Expression()
    | <POINT> ( ObjectAttr() | Length() ) ExpressionLeft()
}

void Length() : {/*@bgen(jjtree) Length */
  ASTLength jjtn000 = new ASTLength(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Length */
    try {
/*@egen*/
    <LENGTH>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Operator(): {/*@bgen(jjtree) Operator */
                  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
                  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;} {/*@bgen(jjtree) Operator */
   try {
/*@egen*/

   (t1 = <LOGICAND>
   |
   t1 = <SMALLERSIGN>
   |
   t1 = <PLUSSIGN>
   |
   t1 = <MINUSIGN>
   |
   t1 = <TIMESSIGN>
   |
   t1 = <DIVIDESIGN>)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
   }
/*@egen*/
   {
       jjtn000.type = t1.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/

}

void FirstLevelPrecende(): {/*@bgen(jjtree) FirstLevelPrecende */
  ASTFirstLevelPrecende jjtn000 = new ASTFirstLevelPrecende(JJTFIRSTLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FirstLevelPrecende */
    try {
/*@egen*/
    SecondLevelPrecende() (  <LOGICAND> SecondLevelPrecende())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SecondLevelPrecende(): {/*@bgen(jjtree) SecondLevelPrecende */
  ASTSecondLevelPrecende jjtn000 = new ASTSecondLevelPrecende(JJTSECONDLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SecondLevelPrecende */
    try {
/*@egen*/
    ThirdLevelPrecende() ( <SMALLERSIGN> ThirdLevelPrecende() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ThirdLevelPrecende(): {/*@bgen(jjtree) ThirdLevelPrecende */
  ASTThirdLevelPrecende jjtn000 = new ASTThirdLevelPrecende(JJTTHIRDLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ThirdLevelPrecende */
    try {
/*@egen*/
    FourthLevelPrecende() ( (<PLUSSIGN>|<MINUSIGN>) FourthLevelPrecende() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FourthLevelPrecende(): {/*@bgen(jjtree) FourthLevelPrecende */
  ASTFourthLevelPrecende jjtn000 = new ASTFourthLevelPrecende(JJTFOURTHLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FourthLevelPrecende */
    try {
/*@egen*/
    ( (<TIMESSIGN>|<DIVIDESIGN>) Expression() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Empty()      : {} {
    {}
}