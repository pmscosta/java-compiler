/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JavaMM.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
               
}

PARSER_BEGIN(JavaMM)
// c\u00f3digo Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public
class JavaMM/*@bgen(jjtree)*/implements JavaMMTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJavaMMState jjtree = new JJTJavaMMState();

/*@egen*/
public
  static void main(String args[]) throws ParseException {
    // cria\u00e7\u00e3o do objecto utilizando o constructor com argumento para

    int size = args.length;
    String fileName = args[size - 1];
    FileInputStream file;

    try {
      file = new FileInputStream(fileName);
      JavaMM parser = new JavaMM(file);
      SimpleNode root = parser.ClassDeclaration();
      root.dump("");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  // luiscubal@fe.up.pt
}

PARSER_END(JavaMM)

    // s\u00edmbolos que n\u00e3o devem ser considerados na an\u00e1lise
    SKIP : {" " | "\t" | "\r" | "\n"}

           // defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais)
TOKEN : {
        <  INTEGER:  <DECIMAL_LITERAL> (["l","L"])?
                                | <HEX_LITERAL> (["l","L"])?
                                | <OCTAL_LITERAL> (["l","L"])? >
                                | < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
                                | < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
                                | < #OCTAL_LITERAL: "0" (["0"-"7"])* >
        |   < CLASS: "class" >
        |   < EXTENDS: "extends" >
        |   < TYPEINT: "int" >
        |   < TYPESTRING: "String" >
        |   < TYPEBOOLEAN: "boolean" >
        |   < PUBLIC: "public" >
        |   < STATIC: "static" >
        |   < VOID: "void" >
        |   < MAIN: "main" >
        |   < RETURN: "return">
        |   < IF: "if" >
        |   < ELSE: "else" >
        |   < WHILE: "while" >
        |   < EQUAL: "=" >
        |   < TRUE: "true">
        |   < LENGTH: "length">
        |   < FALSE: "false">
        |   < THIS: "this">
        |   < NEW: "new">
        |   < SMALLERSIGN: "<" >
        |   < PLUSSIGN: "+">
        |   < MINUSIGN: "-">
        |   < TIMESSIGN: "*">
        |   < DIVIDESIGN: "/">
        |   < LOGICAND: "&&" >
        |   < LOGICNOT: "!">
        |   < OPENCURLYBRACKET: "{" >
        |   < CLOSECURLYBRACKET: "}" >
        |   < OPENBRACKET: "[" >
        |   < CLOSEBRACKET: "]" >
        |   < SEMICOLON: ";" >
        |   < PARENTHESISOPEN: "(" >
        |   < PARENTHESISCLOSE: ")" >
        |   < COMMA: "," >
        |   < POINT: "." >
        |   < IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "_", "$", "0"-"9"])* >
        }


SimpleNode ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                                 ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;} {/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    < CLASS > t1=< IDENTIFIER >{jjtn000.name=t1.image;} [< EXTENDS > < IDENTIFIER >] <OPENCURLYBRACKET>
    
    ( VarDeclaration() )*
   // [ MainDeclaration() ]   //FIX ME
    ( MethodDeclaration() )*
    
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;} {/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    <PUBLIC> Type() t1 = <IDENTIFIER> {jjtn000.name = t1.image;} 
        <PARENTHESISOPEN>
            [ Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )*]
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
        <RETURN> Expression() <SEMICOLON>
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MainDeclaration */
    try {
/*@egen*/
    <PUBLIC> <STATIC> <VOID> <MAIN> 
        <PARENTHESISOPEN>
            <TYPESTRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER>
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
    <CLOSECURLYBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void FunctionBody() : {/*@bgen(jjtree) FunctionBody */
  ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) FunctionBody */
    try {
/*@egen*/
    ( LOOKAHEAD(2) VarDeclaration())*
    (Statement())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;} {/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <TYPEBOOLEAN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.type = "Boolean"; } 
    | <TYPEINT> { jjtn000.type = "int"; } [<OPENBRACKET> <CLOSEBRACKET> { jjtn000.type = "int[]"; } ] 
    | t1 = <IDENTIFIER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.type = t1.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;} {/*@bgen(jjtree) VarDeclaration */
        try {
/*@egen*/
        Type() t1=<IDENTIFIER>{jjtn000.name = t1.image;} <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Statement */
    try {
/*@egen*/
 
    <OPENCURLYBRACKET>
        ( Statement() )*
    <CLOSECURLYBRACKET>
    |   
    <IF> <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
        Statement()
    <ELSE>
        Statement()
    |
    <WHILE> <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
        Statement()
    |
    ExpressionSubset() <SEMICOLON>
    |
    <IDENTIFIER>  ( IdentifierStmt() )? <SEMICOLON>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void IdentifierStmt(): {/*@bgen(jjtree) IdentifierStmt */
  ASTIdentifierStmt jjtn000 = new ASTIdentifierStmt(JJTIDENTIFIERSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IdentifierStmt */
    try {
/*@egen*/
    ExpressionLeftSubset()  | PositionAccess() (Assignment() | ExpressionLeft())  | Assignment()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void PositionAccess() : {/*@bgen(jjtree) PositionAccess */
  ASTPositionAccess jjtn000 = new ASTPositionAccess(JJTPOSITIONACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PositionAccess */
    try {
/*@egen*/
    <OPENBRACKET> Expression() <CLOSEBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Assignment(): {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    <EQUAL> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}




void NewObject(): {/*@bgen(jjtree) NewObject */
  ASTNewObject jjtn000 = new ASTNewObject(JJTNEWOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) NewObject */
    try {
/*@egen*/

    <TYPEINT> <OPENBRACKET> Expression() <CLOSEBRACKET>
    | <IDENTIFIER> <PARENTHESISOPEN> <PARENTHESISCLOSE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ObjectAttr(): {/*@bgen(jjtree) ObjectAttr */
  ASTObjectAttr jjtn000 = new ASTObjectAttr(JJTOBJECTATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ObjectAttr */
    try {
/*@egen*/
    <IDENTIFIER>
    <PARENTHESISOPEN>
        ( Expression() ( <COMMA> Expression() ) * )?
    <PARENTHESISCLOSE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Expression(): {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
        ExpressionSubset() |   <IDENTIFIER> ExpressionLeft()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ExpressionSubset()      : {}
{
    <INTEGER> ExpressionLeft()
|   <TRUE> ExpressionLeft()
|   <FALSE> ExpressionLeft()
|   <THIS> ExpressionLeft()
|   <NEW> NewObject() ExpressionLeft()
|   <LOGICNOT> Expression() ExpressionLeft()
|   <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE> ExpressionLeft()
}


void ExpressionLeft()      : {}
{
    ExpressionLeftSubset()
    | PositionAccess()  ExpressionLeft()
    | Empty()
}

void ExpressionLeftSubset()      : {} {
    Operator() Expression()
    | <POINT> ( ObjectAttr() | <LENGTH> ) ExpressionLeft()
}


void Operator(): {/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operator */
    try {
/*@egen*/

    <LOGICAND>|<SMALLERSIGN>|<PLUSSIGN>|<MINUSIGN>|<TIMESSIGN>|<DIVIDESIGN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void FirstLevelPrecende(): {/*@bgen(jjtree) FirstLevelPrecende */
  ASTFirstLevelPrecende jjtn000 = new ASTFirstLevelPrecende(JJTFIRSTLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FirstLevelPrecende */
    try {
/*@egen*/
    SecondLevelPrecende() (  <LOGICAND> SecondLevelPrecende())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SecondLevelPrecende(): {/*@bgen(jjtree) SecondLevelPrecende */
  ASTSecondLevelPrecende jjtn000 = new ASTSecondLevelPrecende(JJTSECONDLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SecondLevelPrecende */
    try {
/*@egen*/
    ThirdLevelPrecende() ( <SMALLERSIGN> ThirdLevelPrecende() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ThirdLevelPrecende(): {/*@bgen(jjtree) ThirdLevelPrecende */
  ASTThirdLevelPrecende jjtn000 = new ASTThirdLevelPrecende(JJTTHIRDLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThirdLevelPrecende */
    try {
/*@egen*/
    FourthLevelPrecende() ( (<PLUSSIGN>|<MINUSIGN>) FourthLevelPrecende() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FourthLevelPrecende(): {/*@bgen(jjtree) FourthLevelPrecende */
  ASTFourthLevelPrecende jjtn000 = new ASTFourthLevelPrecende(JJTFOURTHLEVELPRECENDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FourthLevelPrecende */
    try {
/*@egen*/
    ( (<TIMESSIGN>|<DIVIDESIGN>) Expression() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Empty()      : {} {
    {}
}