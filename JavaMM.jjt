options
{
    LOOKAHEAD=1;
    MULTI=true;
    TRACK_TOKENS = true;
}

PARSER_BEGIN(JavaMM)
// código Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public
class JavaMM {
public
  static void main(String args[]) throws ParseException {
    // criação do objecto utilizando o constructor com argumento para

    int size = args.length;
    String fileName = args[size - 1];
    FileInputStream file;

    try {
      file = new FileInputStream(fileName);
      JavaMM parser = new JavaMM(file);
      SimpleNode root = parser.ClassDeclaration();
      root.dump("");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  public static void error_skipto(int kind){
      ParseException e = generateParseException();
      System.out.println(e.toString());
      Token t;

      do{

          t = getToken(1);

          if(t.kind == kind)
            return;

          t = getNextToken();
      } while(t.kind != kind);
  }

}

PARSER_END(JavaMM)

    // símbolos que não devem ser considerados na análise
    SKIP : {" " | "\t" | "\r" | "\n"}

           // definição dos tokens (símbolos terminais)
TOKEN : {
        <  INTEGER:  <DECIMAL_LITERAL> (["l","L"])?
                                | <HEX_LITERAL> (["l","L"])?
                                | <OCTAL_LITERAL> (["l","L"])? >
                                | < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
                                | < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
                                | < #OCTAL_LITERAL: "0" (["0"-"7"])* >
        |   < CLASS: "class" >
        |   < EXTENDS: "extends" >
        |   < TYPEINT: "int" >
        |   < TYPESTRING: "String" >
        |   < TYPEBOOLEAN: "boolean" >
        |   < PUBLIC: "public" >
        |   < STATIC: "static" >
        |   < VOID: "void" >
        |   < MAIN: "main" >
        |   < RETURN: "return">
        |   < IF: "if" >
        |   < ELSE: "else" >
        |   < WHILE: "while" >
        |   < EQUAL: "=" >
        |   < TRUE: "true">
        |   < LENGTH: "length">
        |   < FALSE: "false">
        |   < THIS: "this">
        |   < NEW: "new">
        |   < SMALLERSIGN: "<" >
        |   < PLUSSIGN: "+">
        |   < MINUSIGN: "-">
        |   < TIMESSIGN: "*">
        |   < DIVIDESIGN: "/">
        |   < LOGICAND: "&&" >
        |   < LOGICNOT: "!">
        |   < OPENCURLYBRACKET: "{" >
        |   < CLOSECURLYBRACKET: "}" >
        |   < OPENBRACKET: "[" >
        |   < CLOSEBRACKET: "]" >
        |   < SEMICOLON: ";" >
        |   < PARENTHESISOPEN: "(" >
        |   < PARENTHESISCLOSE: ")" >
        |   < COMMA: "," >
        |   < POINT: "." >
        |   < IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "_", "$", "0"-"9"])* >
        }


SimpleNode ClassDeclaration() : {Token t1;} {
    < CLASS > t1=< IDENTIFIER >{jjtThis.name=t1.image;} [< EXTENDS > < IDENTIFIER >] <OPENCURLYBRACKET>
    
    ( VarDeclaration() )*
    ( PublicFunction() )*
    
    <CLOSECURLYBRACKET>

    {return jjtThis;}
}

void PublicFunction() #void : {}{

    <PUBLIC> (Type() MethodDeclaration() | <STATIC> MainDeclaration())

}

void MethodDeclaration() : {Token t1;} {
    t1 = <IDENTIFIER> {jjtThis.name = t1.image;} 
        <PARENTHESISOPEN>
            Arguments()
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
        Return()
    <CLOSECURLYBRACKET>
}

void MainDeclaration() : {} {
    <VOID> <MAIN> 
        <PARENTHESISOPEN>
            <TYPESTRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER>
        <PARENTHESISCLOSE>
    <OPENCURLYBRACKET>
        FunctionBody()
    <CLOSECURLYBRACKET>
}

void Return() : {}{
        <RETURN> Expression() <SEMICOLON>
}

void Arguments() : {}{
    [ Argument() ( <COMMA> Argument() )*]
}

void Argument() : {Token t1;}{
    Type() t1 = <IDENTIFIER> {jjtThis.name = t1.image;}
}


void FunctionBody() : {} {
    ( LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
}

void Type() : {Token t1;} {
    <TYPEBOOLEAN> { jjtThis.type = "Boolean"; } 
    | <TYPEINT> { jjtThis.type = "int"; } [<OPENBRACKET> <CLOSEBRACKET> { jjtThis.type = "int[]"; } ] 
    | t1 = <IDENTIFIER> { jjtThis.type = t1.image; } 
}

void VarDeclaration() : {Token t1;} {
        Type() t1=<IDENTIFIER>{jjtThis.identifier = t1.image;} <SEMICOLON>

}

void Statement() #void : {} {
 
    <OPENCURLYBRACKET>
        ( Statement() )*
    <CLOSECURLYBRACKET>
    |   
    If()
    Else()
    |
    While()
    |
    ExpressionTerminals() <SEMICOLON>
}

void If() : {}{
    <IF>
        <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
            Statement()
}

void Else() : {}{
    <ELSE>

        Statement()
}

void While() : {Token t1;}{

    <WHILE>
        <PARENTHESISOPEN>
        { try{
            Expression();
        } catch(ParseException e){
            error_skipto(PARENTHESISCLOSE);
        }
        }
        <PARENTHESISCLOSE>
        
        Statement()
}

void Assignment() : {Token t1;}{
    t1 = <IDENTIFIER> {jjtThis.name = t1.image;} ( IdentifierStmt() )? <SEMICOLON>
}

void IdentifierStmt() #void : {} {
    PositionAccess() (AssignmentLeft() 
    | 
    ExpressionRight())  
    | 
    AssignmentLeft() 
}

void AssignmentLeft(): {} {
    <EQUAL> Expression()
}

void Expression()  #void: {} 
{
        ExpressionTerminals() |   ExpressionIdent()
}


/*




    NEW





*/



void ExpressionTerminals() #void: {}
{
    SecondLevelPrecende() 
    (
        <LOGICAND> SecondLevelPrecende() #And(2)
    )*
    ExpressionRight()
}

void SecondLevelPrecende() #void : {}
{
    ThirdLevelPrecende() 
    ( 
        <SMALLERSIGN> ThirdLevelPrecende() #LessThan(2)
    )*
}

void ThirdLevelPrecende() #void :  {}
{
    FourthLevelPrecende()
    (
        <PLUSSIGN> FourthLevelPrecende() #Add(2) 
        |
        <MINUSIGN> FourthLevelPrecende() #Sub(2) 
    )*
}

void FourthLevelPrecende() #void : {Token t1;}
{
    PrecendeTerminals()
    (
        <TIMESSIGN>  PrecendeTerminals() #Mult(2)
        |
        <DIVIDESIGN> PrecendeTerminals() #Div(2) 
    )*
}

void PrecendeTerminals() : {Token t1;}{
        (   
            t1 = <INTEGER>
            |   
            t1 = <TRUE> 
            |
            t1 = <FALSE>
            |   
            t1 = <THIS>
            |   
            t1 = <NEW> NewObject() 
            |   
            t1 = <LOGICNOT> Expression()
        ) {jjtThis.name = t1.image;}
        |   
            <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE>
    
}



/*






    OLD


void ExpressionTerminals() : {Token t1;}
{
    (
    t1 = <INTEGER> ExpressionRight()
    |   
    t1 = <TRUE> ExpressionRight()
    |
    t1 = <FALSE> ExpressionRight()
    |   
    t1 = <THIS> ExpressionRight()
    |   
    t1 = <NEW> NewObject() ExpressionRight()
    |   
    t1 = <LOGICNOT> Expression() ExpressionRight() ){ jjtThis.name = t1.image;}
    |   
    <PARENTHESISOPEN> Expression() <PARENTHESISCLOSE> ExpressionRight()
}


*/

void ExpressionIdent() : {Token t1;}{
        t1 = <IDENTIFIER> {jjtThis.name = t1.image;} ExpressionRight()
}

void ExpressionRight() #void: {}
{
    ExpressionRightSubset()
    | PositionAccess()  ExpressionRight()
    | Empty()
}

void ExpressionRightSubset() #void: {} {
     Expression()
    | <POINT> ( ObjectAttr() | Length() ) ExpressionRight()
}





void PositionAccess() : {Token t1;} {
    <OPENBRACKET> Expression() <CLOSEBRACKET> 
}

void NewObject(): {Token t1;} {
    
    (
    t1 = <TYPEINT> <OPENBRACKET> Expression() <CLOSEBRACKET>
    | 
    t1 = <IDENTIFIER> <PARENTHESISOPEN> <PARENTHESISCLOSE> 
    ){jjtThis.name = t1.image;}
}

void ObjectAttr(): {Token t1;} {
    t1 = <IDENTIFIER> {jjtThis.name = t1.image;}
    <PARENTHESISOPEN>
        ( Expression() ( <COMMA> Expression() ) * )?
    <PARENTHESISCLOSE>
}

void Length() : {}{
    <LENGTH>
}



void Operator(): {Token t1;} {

   (t1 = <LOGICAND>
   |
   t1 = <SMALLERSIGN>
   |
   t1 = <PLUSSIGN>
   |
   t1 = <MINUSIGN>
   |
   t1 = <TIMESSIGN>
   |
   t1 = <DIVIDESIGN>)
   {
       jjtThis.type = t1.image;
   }

}

void Empty() #void: {} {
    {}
}