/* Generated By:JJTree&JavaCC: Do not edit this line. JavaMM.java */
// código Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public
class JavaMM/*@bgen(jjtree)*/implements JavaMMTreeConstants, JavaMMConstants {/*@bgen(jjtree)*/
  protected static JJTJavaMMState jjtree = new JJTJavaMMState();public
  static void main(String args[]) throws ParseException {
    // criação do objecto utilizando o constructor com argumento para

    int size = args.length;
    String fileName = args[size - 1];
    FileInputStream file;

    try {
      file = new FileInputStream(fileName);
      JavaMM parser = new JavaMM(file);
      SimpleNode root = parser.ClassDeclaration();
      root.dump("");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  public static void error_skipto(int kind){
      ParseException e = generateParseException();
      System.out.println(e.toString());
      Token t;

      do{

          t = getToken(1);

          if(t.kind == kind)
            return;

          t = getNextToken();
      } while(t.kind != kind);
  }

  static final public SimpleNode ClassDeclaration() throws ParseException {
                                 /*@bgen(jjtree) ClassDeclaration */
                                 ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      jj_consume_token(CLASS);
      t1 = jj_consume_token(IDENTIFIER);
                                jjtn000.name=t1.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(OPENCURLYBRACKET);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPEINT:
        case TYPEBOOLEAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        PublicFunction();
      }
      jj_consume_token(CLOSECURLYBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void PublicFunction() throws ParseException {
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEINT:
    case TYPEBOOLEAN:
    case IDENTIFIER:
      Type();
      MethodDeclaration();
      break;
    case STATIC:
      jj_consume_token(STATIC);
      MainDeclaration();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MethodDeclaration() throws ParseException {
                            /*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
                       jjtn000.name = t1.image;
      jj_consume_token(PARENTHESISOPEN);
      Arguments();
      jj_consume_token(PARENTHESISCLOSE);
      jj_consume_token(OPENCURLYBRACKET);
      FunctionBody();
      Return();
      jj_consume_token(CLOSECURLYBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {
                          /*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(PARENTHESISOPEN);
      jj_consume_token(TYPESTRING);
      jj_consume_token(OPENBRACKET);
      jj_consume_token(CLOSEBRACKET);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(PARENTHESISCLOSE);
      jj_consume_token(OPENCURLYBRACKET);
      FunctionBody();
      jj_consume_token(CLOSECURLYBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Return() throws ParseException {
                 /*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Arguments() throws ParseException {
                    /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEINT:
      case TYPEBOOLEAN:
      case IDENTIFIER:
        Argument();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          Argument();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Argument() throws ParseException {
                   /*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      Type();
      t1 = jj_consume_token(IDENTIFIER);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.jjtSetLastToken(getToken(0));
                              jjtn000.name = t1.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void FunctionBody() throws ParseException {
                       /*@bgen(jjtree) FunctionBody */
  ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        VarDeclaration();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case LOGICNOT:
        case OPENCURLYBRACKET:
        case PARENTHESISOPEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        Statement();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Type() throws ParseException {
               /*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEBOOLEAN:
        jj_consume_token(TYPEBOOLEAN);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                    jjtn000.name = "Boolean";
        break;
      case TYPEINT:
        jj_consume_token(TYPEINT);
                  jjtn000.name = "int";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENBRACKET:
          jj_consume_token(OPENBRACKET);
          jj_consume_token(CLOSEBRACKET);
                                                                          jjtn000.name = "int[]";
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                          jjtn000.name = t1.image;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {
                         /*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      Type();
      t1 = jj_consume_token(IDENTIFIER);
                               jjtn000.name = t1.image;
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENCURLYBRACKET:
      jj_consume_token(OPENCURLYBRACKET);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case LOGICNOT:
        case OPENCURLYBRACKET:
        case PARENTHESISOPEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(CLOSECURLYBRACKET);
      break;
    case IF:
      If();
      Else();
      break;
    case WHILE:
      While();
      break;
    case IDENTIFIER:
      IdentifierAssignment();
      break;
    case INTEGER:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LOGICNOT:
    case PARENTHESISOPEN:
      ExpressionNoIdent();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpressionNoIdent() throws ParseException {
                                  Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t1 = jj_consume_token(INTEGER);
                           ASTinteger jjtn001 = new ASTinteger(JJTINTEGER);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
      try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                          jjtn001.name = t1.image;
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
      }
      break;
    case TRUE:
      t1 = jj_consume_token(TRUE);
                        ASTbool jjtn002 = new ASTbool(JJTBOOL);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
      try {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                       jjtn002.name = t1.image;
      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
      }
      break;
    case FALSE:
      t1 = jj_consume_token(FALSE);
                         ASTbool jjtn003 = new ASTbool(JJTBOOL);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtn003.jjtSetFirstToken(getToken(1));
      try {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                         jjtn003.jjtSetLastToken(getToken(0));
                        jjtn003.name = t1.image;
      } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtn003.jjtSetLastToken(getToken(0));
                         }
      }
      break;
    case THIS:
      t1 = jj_consume_token(THIS);
                        ASTthis_ jjtn004 = new ASTthis_(JJTTHIS_);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
      try {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.jjtSetLastToken(getToken(0));
                       jjtn004.name = t1.image;
      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004, true);
                          jjtn004.jjtSetLastToken(getToken(0));
                        }
      }
      break;
    case NEW:
      NewObject();
      break;
    case LOGICNOT:
      t1 = jj_consume_token(LOGICNOT);
      Expression();
                                         ASTnot jjtn005 = new ASTnot(JJTNOT);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
                                         jjtn005.jjtSetFirstToken(getToken(1));
      try {
                                         jjtree.closeNodeScope(jjtn005, true);
                                         jjtc005 = false;
                                         jjtn005.jjtSetLastToken(getToken(0));
                                        jjtn005.name = t1.image;
      } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005, true);
                                           jjtn005.jjtSetLastToken(getToken(0));
                                         }
      }
      break;
    case PARENTHESISOPEN:
      jj_consume_token(PARENTHESISOPEN);
      Expression();
      jj_consume_token(PARENTHESISCLOSE);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ExpressionRight();
    Operator1();
  }

  static final public void IdentifierAssignment() throws ParseException {
    Ident();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
                  ASTEQUAL jjtn001 = new ASTEQUAL(JJTEQUAL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
      }
      jj_consume_token(SEMICOLON);
      break;
    case INTEGER:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case SMALLERSIGN:
    case PLUSSIGN:
    case MINUSIGN:
    case TIMESSIGN:
    case DIVIDESIGN:
    case LOGICAND:
    case LOGICNOT:
    case OPENBRACKET:
    case SEMICOLON:
    case PARENTHESISOPEN:
    case POINT:
    case IDENTIFIER:
      ExpressionRight();
      Operator1();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Operator1() throws ParseException {
    Operator2();
    label_7:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(LOGICAND);
                 ASTAnd jjtn001 = new ASTAnd(JJTAND);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Operator2();
      } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                   jjtn001.jjtSetLastToken(getToken(0));
                 }
      }
    }
  }

  static final public void Operator2() throws ParseException {
    Operator3();
    label_8:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(SMALLERSIGN);
                    ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Operator3();
      } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
      }
    }
  }

  static final public void Operator3() throws ParseException {
    Operator4();
    label_9:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSSIGN:
        jj_consume_token(PLUSSIGN);
                         ASTAdd jjtn001 = new ASTAdd(JJTADD);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
        try {
          Operator4();
        } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
        } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
        }
        break;
      case MINUSIGN:
        jj_consume_token(MINUSIGN);
                         ASTSub jjtn002 = new ASTSub(JJTSUB);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
        try {
          Operator4();
        } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte002;}
                         }
                         if (jjte002 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte002;}
                         }
                         {if (true) throw (Error)jjte002;}
        } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Operator4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LOGICNOT:
    case PARENTHESISOPEN:
    case IDENTIFIER:
      PrecedenceTerminals();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMESSIGN:
        jj_consume_token(TIMESSIGN);
                           ASTMult jjtn001 = new ASTMult(JJTMULT);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
        try {
          PrecedenceTerminals();
        } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
        } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
        }
        break;
      case DIVIDESIGN:
        jj_consume_token(DIVIDESIGN);
                           ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          PrecedenceTerminals();
        } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                             jjtn002.jjtSetLastToken(getToken(0));
                           }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Ident() throws ParseException {
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENBRACKET:
      PositionAccess();
      break;
    default:
      jj_la1[16] = jj_gen;
      Empty();
    }
  }

  static final public void Identifier() throws ParseException {
                           /*@bgen(jjtree) Term */
                           ASTTerm jjtn000 = new ASTTerm(JJTTERM);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                       jjtn000.name = t1.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void If() throws ParseException {
             /*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(PARENTHESISOPEN);
      Expression();
      jj_consume_token(PARENTHESISCLOSE);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Else() throws ParseException {
               /*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void While() throws ParseException {
                /*@bgen(jjtree) While */
                ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTHESISOPEN);
          try{
            Expression();
        } catch(ParseException e){
            error_skipto(PARENTHESISCLOSE);
        }
      jj_consume_token(PARENTHESISCLOSE);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Expression() throws ParseException {
    ExpressionPrecedence();
  }

  static final public void ExpressionPrecedence() throws ParseException {
    SecondLevelPrecedence();
    label_11:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(LOGICAND);
                     ASTAnd jjtn001 = new ASTAnd(JJTAND);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
      try {
        SecondLevelPrecedence();
      } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
      }
    }
  }

  static final public void SecondLevelPrecedence() throws ParseException {
    ThirdLevelPrecedence();
    label_12:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(SMALLERSIGN);
                        ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ThirdLevelPrecedence();
      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtn001.jjtSetLastToken(getToken(0));
                        }
      }
    }
  }

  static final public void ThirdLevelPrecedence() throws ParseException {
    FourthLevelPrecedence();
    label_13:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSSIGN:
        jj_consume_token(PLUSSIGN);
                         ASTAdd jjtn001 = new ASTAdd(JJTADD);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
        try {
          FourthLevelPrecedence();
        } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
        } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
        }
        break;
      case MINUSIGN:
        jj_consume_token(MINUSIGN);
                         ASTSub jjtn002 = new ASTSub(JJTSUB);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
        try {
          FourthLevelPrecedence();
        } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte002;}
                         }
                         if (jjte002 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte002;}
                         }
                         {if (true) throw (Error)jjte002;}
        } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void FourthLevelPrecedence() throws ParseException {
                                      Token t1;
    PrecedenceTerminals();
    label_14:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMESSIGN:
        jj_consume_token(TIMESSIGN);
                           ASTMult jjtn001 = new ASTMult(JJTMULT);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
        try {
          PrecedenceTerminals();
        } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
        } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
        }
        break;
      case DIVIDESIGN:
        jj_consume_token(DIVIDESIGN);
                           ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          PrecedenceTerminals();
        } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                             jjtn002.jjtSetLastToken(getToken(0));
                           }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void PrecedenceTerminals() throws ParseException {
                                    Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t1 = jj_consume_token(INTEGER);
                           ASTinteger jjtn001 = new ASTinteger(JJTINTEGER);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
      try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                          jjtn001.name = t1.image;
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
      }
      break;
    case TRUE:
      t1 = jj_consume_token(TRUE);
                        ASTbool jjtn002 = new ASTbool(JJTBOOL);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
      try {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                       jjtn002.name = t1.image;
      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
      }
      break;
    case FALSE:
      t1 = jj_consume_token(FALSE);
                         ASTbool jjtn003 = new ASTbool(JJTBOOL);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtn003.jjtSetFirstToken(getToken(1));
      try {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                         jjtn003.jjtSetLastToken(getToken(0));
                        jjtn003.name = t1.image;
      } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtn003.jjtSetLastToken(getToken(0));
                         }
      }
      break;
    case THIS:
      t1 = jj_consume_token(THIS);
                        ASTthis_ jjtn004 = new ASTthis_(JJTTHIS_);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
      try {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.jjtSetLastToken(getToken(0));
                       jjtn004.name = t1.image;
      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004, true);
                          jjtn004.jjtSetLastToken(getToken(0));
                        }
      }
      break;
    case NEW:
      NewObject();
      break;
    case LOGICNOT:
      t1 = jj_consume_token(LOGICNOT);
      Expression();
                                         ASTnot jjtn005 = new ASTnot(JJTNOT);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
                                         jjtn005.jjtSetFirstToken(getToken(1));
      try {
                                         jjtree.closeNodeScope(jjtn005, true);
                                         jjtc005 = false;
                                         jjtn005.jjtSetLastToken(getToken(0));
                                        jjtn005.name = t1.image;
      } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005, true);
                                           jjtn005.jjtSetLastToken(getToken(0));
                                         }
      }
      break;
    case IDENTIFIER:
      Identifier();
      break;
    case PARENTHESISOPEN:
      jj_consume_token(PARENTHESISOPEN);
      Expression();
      jj_consume_token(PARENTHESISCLOSE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ExpressionRight();
  }

  static final public void ExpressionRight() throws ParseException {
                               Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      t1 = jj_consume_token(POINT);
                   ASTPOINT jjtn001 = new ASTPOINT(JJTPOINT);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ObjectAttr();
          break;
        case LENGTH:
          Length();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
      }
      ExpressionRight();
      break;
    case OPENBRACKET:
      PositionAccess();
      ExpressionRight();
      break;
    default:
      jj_la1[21] = jj_gen;
      Empty();
    }
  }

  static final public void PositionAccess() throws ParseException {
    jj_consume_token(OPENBRACKET);
                     ASTPOSITION jjtn001 = new ASTPOSITION(JJTPOSITION);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
    try {
      Expression();
    } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
    } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
    }
    jj_consume_token(CLOSEBRACKET);
  }

  static final public void NewObject() throws ParseException {
                          Token t1;
    jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEINT:
      t1 = jj_consume_token(TYPEINT);
                           ASTinteger jjtn001 = new ASTinteger(JJTINTEGER);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
      try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                          jjtn001.name = t1.image;
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
      }
      jj_consume_token(OPENBRACKET);
      Expression();
                                                                                           ASTNEW jjtn002 = new ASTNEW(JJTNEW);
                                                                                           boolean jjtc002 = true;
                                                                                           jjtree.openNodeScope(jjtn002);
                                                                                           jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(CLOSEBRACKET);
      } finally {
                                                                                           if (jjtc002) {
                                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                                             jjtn002.jjtSetLastToken(getToken(0));
                                                                                           }
      }
      break;
    case IDENTIFIER:
      Identifier();
      jj_consume_token(PARENTHESISOPEN);
                                          ASTNEW jjtn003 = new ASTNEW(JJTNEW);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
                                          jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARENTHESISCLOSE);
      } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003,  1);
                                            jjtn003.jjtSetLastToken(getToken(0));
                                          }
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ObjectAttr() throws ParseException {
                    /*@bgen(jjtree) ObjectAttr */
                    ASTObjectAttr jjtn000 = new ASTObjectAttr(JJTOBJECTATTR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
                       jjtn000.name = t1.image;
      jj_consume_token(PARENTHESISOPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case TRUE:
      case FALSE:
      case THIS:
      case NEW:
      case LOGICNOT:
      case PARENTHESISOPEN:
      case IDENTIFIER:
        Expression();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(PARENTHESISCLOSE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Length() throws ParseException {
                 /*@bgen(jjtree) Length */
  ASTLength jjtn000 = new ASTLength(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LENGTH);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Empty() throws ParseException {

  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_16() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(PARENTHESISOPEN)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(LOGICNOT)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(TYPEINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(TYPEBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(DIVIDESIGN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(TIMESSIGN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(DIVIDESIGN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(TIMESSIGN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(MINUSIGN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(PLUSSIGN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(MINUSIGN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(PLUSSIGN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(SMALLERSIGN)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(SMALLERSIGN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LOGICAND)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(LOGICAND)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(OPENBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaMMTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x28000,0x40000,0xa8000,0x0,0x28000,0xea800200,0x0,0x28000,0xea800200,0xea800200,0xe8000200,0xec000200,0x0,0xe8000200,0x0,0x0,0x0,0x0,0xe8000200,0x10000000,0x0,0x8000,0x0,0xe8000200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10000,0x0,0x10000,0x4000,0x10000,0x110c0,0x200,0x10000,0x110c0,0x110c0,0x1040,0x19a7f,0x6,0x11040,0x18,0x200,0x6,0x18,0x11040,0x10000,0x8200,0x10000,0x4000,0x11040,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaMM(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaMM(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaMM(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaMM(JavaMMTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaMMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
