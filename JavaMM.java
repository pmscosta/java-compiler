/* Generated By:JJTree&JavaCC: Do not edit this line. JavaMM.java */
// código Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public
class JavaMM/*@bgen(jjtree)*/implements JavaMMTreeConstants, JavaMMConstants {/*@bgen(jjtree)*/
  protected static JJTJavaMMState jjtree = new JJTJavaMMState();public
  static void main(String args[]) throws ParseException {
    // criação do objecto utilizando o constructor com argumento para

    int size = args.length;
    String fileName = args[size - 1];
    FileInputStream file;

    try {
      file = new FileInputStream(fileName);
      JavaMM parser = new JavaMM(file);
      SimpleNode root = parser.ClassDeclaration();
      root.dump("");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  static final public SimpleNode ClassDeclaration() throws ParseException {
                                 /*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(OPENCURLYBRACKET);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPEINT:
        case TYPEBOOLEAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        MethodDeclaration();
      }
      jj_consume_token(CLOSECURLYBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void MethodDeclaration() throws ParseException {
                            /*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(PARENTHESISOPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEINT:
      case TYPEBOOLEAN:
      case IDENTIFIER:
        Type();
        jj_consume_token(IDENTIFIER);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          Type();
          jj_consume_token(IDENTIFIER);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(PARENTHESISCLOSE);
      jj_consume_token(OPENCURLYBRACKET);
      FunctionBody();
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(CLOSECURLYBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {
                          /*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(PARENTHESISOPEN);
      jj_consume_token(TYPESTRING);
      jj_consume_token(OPENBRACKET);
      jj_consume_token(CLOSEBRACKET);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(PARENTHESISCLOSE);
      jj_consume_token(OPENCURLYBRACKET);
      FunctionBody();
      jj_consume_token(CLOSECURLYBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Empty() throws ParseException {
               /*@bgen(jjtree) Empty */
  ASTEmpty jjtn000 = new ASTEmpty(JJTEMPTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;

    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FunctionBody() throws ParseException {
                       /*@bgen(jjtree) FunctionBody */
  ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        VarDeclaration();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case LOGICNOT:
        case OPENCURLYBRACKET:
        case PARENTHESISOPEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        Statement();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Type() throws ParseException {
               /*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEBOOLEAN:
        jj_consume_token(TYPEBOOLEAN);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.type = "Boolean";
        break;
      case TYPEINT:
        jj_consume_token(TYPEINT);
                  jjtn000.type = "int";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENBRACKET:
          jj_consume_token(OPENBRACKET);
          jj_consume_token(CLOSEBRACKET);
                                                                          jjtn000.type = "int[]";
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.type = t1.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {
                         /*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENCURLYBRACKET:
        jj_consume_token(OPENCURLYBRACKET);
        Statement();
        jj_consume_token(CLOSECURLYBRACKET);
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(PARENTHESISOPEN);
        Expression();
        jj_consume_token(PARENTHESISCLOSE);
        Statement();
        jj_consume_token(ELSE);
        Statement();
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(PARENTHESISOPEN);
        Expression();
        jj_consume_token(PARENTHESISCLOSE);
        Statement();
        break;
<<<<<<< HEAD
      case TRUE:
      case FALSE:
      case THIS:
      case NEW:
      case LOGICNOT:
      case PARENTHESISOPEN:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        Expression();
        jj_consume_token(SEMICOLON);
        break;
        jj_consume_token(IDENTIFIER);
        Assignment();
        break;
=======
>>>>>>> master
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_2(2147483647)) {
          Expression();
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            FollowIdentifier();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

<<<<<<< HEAD
  static final public void Assignment() throws ParseException {
                    /*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
=======
  static final public void FollowIdentifier() throws ParseException {
                          /*@bgen(jjtree) FollowIdentifier */
  ASTFollowIdentifier jjtn000 = new ASTFollowIdentifier(JJTFOLLOWIDENTIFIER);
>>>>>>> master
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENBRACKET:
        PositionAccess();
        break;
      default:
<<<<<<< HEAD
        jj_la1[9] = jj_gen;
        ;
      }
      AssignmentLeft();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
=======
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
>>>>>>> master
      }
    }
  }

  static final public void PositionAccess() throws ParseException {
                         /*@bgen(jjtree) PositionAccess */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSITIONACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPENBRACKET);
      Expression();
      jj_consume_token(CLOSEBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void AssignmentLeft() throws ParseException {
                        /*@bgen(jjtree) AssignmentLeft */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTLEFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQUAL);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Symbol() throws ParseException {
                /*@bgen(jjtree) Symbol */
  ASTSymbol jjtn000 = new ASTSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAND:
        jj_consume_token(LOGICAND);
        break;
      case SMALLERSIGN:
        jj_consume_token(SMALLERSIGN);
        break;
      case PLUSSIGN:
        jj_consume_token(PLUSSIGN);
        break;
      case MINUSIGN:
        jj_consume_token(MINUSIGN);
        break;
      case TIMESSIGN:
        jj_consume_token(TIMESSIGN);
        break;
      case DIVIDESIGN:
        jj_consume_token(DIVIDESIGN);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {
                    /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        ExpressionLeft();
        break;
      case TRUE:
        jj_consume_token(TRUE);
        ExpressionLeft();
        break;
      case FALSE:
        jj_consume_token(FALSE);
        ExpressionLeft();
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        ExpressionLeft();
        break;
      case THIS:
        jj_consume_token(THIS);
        ExpressionLeft();
        break;
<<<<<<< HEAD
      case NEW:
        jj_consume_token(NEW);
        NewObject();
        break;
      case LOGICNOT:
        jj_consume_token(LOGICNOT);
        Expression();
        ExpressionLeft();
        break;
      case PARENTHESISOPEN:
        jj_consume_token(PARENTHESISOPEN);
        Expression();
        jj_consume_token(PARENTHESISCLOSE);
        ExpressionLeft();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NewObject() throws ParseException {
                   /*@bgen(jjtree) NewObject */
  SimpleNode jjtn000 = new SimpleNode(JJTNEWOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEINT:
        jj_consume_token(TYPEINT);
        jj_consume_token(OPENBRACKET);
        Expression();
        jj_consume_token(CLOSEBRACKET);
        ExpressionLeft();
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        jj_consume_token(PARENTHESISOPEN);
        jj_consume_token(PARENTHESISCLOSE);
        ExpressionLeft();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ObjectAttr() throws ParseException {
                    /*@bgen(jjtree) ObjectAttr */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJECTATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTH:
        jj_consume_token(LENGTH);
        ExpressionLeft();
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        ExpressionLeft();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
=======
      default:
        jj_la1[12] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(NEW);
          jj_consume_token(TYPEINT);
          jj_consume_token(OPENBRACKET);
          Expression();
          jj_consume_token(CLOSEBRACKET);
          ExpressionLeft();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
            jj_consume_token(NEW);
            jj_consume_token(IDENTIFIER);
            jj_consume_token(PARENTHESISOPEN);
            jj_consume_token(PARENTHESISCLOSE);
            ExpressionLeft();
            break;
          case LOGICNOT:
            jj_consume_token(LOGICNOT);
            Expression();
            ExpressionLeft();
            break;
          case PARENTHESISOPEN:
            jj_consume_token(PARENTHESISOPEN);
            Expression();
            jj_consume_token(PARENTHESISCLOSE);
            ExpressionLeft();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
>>>>>>> master
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionLeft() throws ParseException {
                        /*@bgen(jjtree) ExpressionLeft */
  ASTExpressionLeft jjtn000 = new ASTExpressionLeft(JJTEXPRESSIONLEFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALLERSIGN:
      case PLUSSIGN:
      case MINUSIGN:
      case TIMESSIGN:
      case DIVIDESIGN:
      case LOGICAND:
        Symbol();
        Expression();
        ExpressionLeft();
        break;
      case OPENBRACKET:
        jj_consume_token(OPENBRACKET);
        Expression();
        jj_consume_token(CLOSEBRACKET);
        break;
<<<<<<< HEAD
      case POINT:
        jj_consume_token(POINT);
        ObjectAttr();
        break;
      default:
        jj_la1[14] = jj_gen;
        Empty();
=======
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_4(2)) {
          jj_consume_token(POINT);
          jj_consume_token(LENGTH);
          ExpressionLeft();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POINT:
            jj_consume_token(POINT);
            jj_consume_token(IDENTIFIER);
            ExpressionLeft();
            break;
          default:
            jj_la1[15] = jj_gen;
            Empty();
          }
        }
>>>>>>> master
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(TYPEINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(TYPEINT)) return true;
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(CLOSEBRACKET)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(FALSE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(TYPEBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(TRUE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(OPENBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(CLOSEBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(PARENTHESISOPEN)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(PARENTHESISCLOSE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(LOGICNOT)) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(PARENTHESISOPEN)) return true;
    if (jj_scan_token(PARENTHESISCLOSE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaMMTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
<<<<<<< HEAD
  static final private int[] jj_la1 = new int[15];
=======
  static final private int[] jj_la1 = new int[16];
>>>>>>> master
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
<<<<<<< HEAD
      jj_la1_0 = new int[] {0x80,0x500,0x800,0x0,0x500,0x81d50000,0x0,0x500,0x81d50000,0x0,0x7e000000,0x81d00000,0x100,0x200000,0x7e000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2000,0x0,0x80,0x2000,0x2221,0x4,0x2000,0x2221,0x4,0x0,0x2220,0x2000,0x2000,0x104,};
=======
      jj_la1_0 = new int[] {0x400,0x2800,0x4000,0x0,0x2800,0xea80020,0x0,0x2800,0x280000,0x0,0x400000,0xf0000000,0x6800020,0x8000000,0xf0000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1000,0x0,0x400,0x1000,0x110c,0x20,0x1000,0x8,0x1000,0x20,0x3,0x1000,0x104,0x23,0x800,};
>>>>>>> master
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaMM(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaMM(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
>>>>>>> master
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
>>>>>>> master
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaMM(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
>>>>>>> master
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
>>>>>>> master
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaMM(JavaMMTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
>>>>>>> master
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaMMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
<<<<<<< HEAD
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
=======
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
>>>>>>> master
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
<<<<<<< HEAD
    for (int i = 0; i < 15; i++) {
=======
    for (int i = 0; i < 16; i++) {
>>>>>>> master
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  // luiscubal@fe.up.pt
}
