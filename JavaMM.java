
/* Generated By:JJTree&JavaCC: Do not edit this line. JavaMM.java */
// código Java que invoca o parser
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class JavaMM/* @bgen(jjtree) */ implements JavaMMTreeConstants, JavaMMConstants {/* @bgen(jjtree) */
  protected static JJTJavaMMState jjtree = new JJTJavaMMState();

  public static void main(String args[]) throws ParseException {
    // criação do objecto utilizando o constructor com argumento para

    int size = args.length;
    String fileName = args[size - 1];
    FileInputStream file;

    try {
      file = new FileInputStream(fileName);
      JavaMM parser = new JavaMM(file);
      SimpleNode root = parser.ClassDeclaration();
      reorganizetree(root);
      root.dump("");
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  public static void reorganizetree(SimpleNode node) {

    if (node instanceof ASTOperator) {

      SimpleNode left_term = (SimpleNode) node.jjtGetParent();

      if (left_term.jjtGetNumChildren() == 2) {

        System.out.println(left_term.jjtGetNumChildren());

        SimpleNode right_term = (SimpleNode) left_term.jjtGetChild(1);

        left_term.jjtRemoveChild(0);

        left_term.jjtRemoveChild(0);

        Node expr = left_term.jjtGetParent();

        expr.jjtAddChild(node, 1);

        expr.jjtAddChild(right_term, 2);
      }
    }

    if (node.children != null) {
      for (int i = 0; i < node.jjtGetNumChildren(); i++) {
        SimpleNode n = (SimpleNode) node.jjtGetChild(i);
        reorganizetree(n);
      }
    }

  }

  public static void error_skipto(int kind) {
    ParseException e = generateParseException();
    System.out.println(e.toString());
    Token t;

    do {

      t = getToken(1);

      if (t.kind == kind)
        return;

      t = getNextToken();
    } while (t.kind != kind);
  }

  static final public SimpleNode ClassDeclaration() throws ParseException {
    /* @bgen(jjtree) ClassDeclaration */
    ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      jj_consume_token(CLASS);
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.name = t1.image;
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(OPENCURLYBRACKET);
      label_1: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case TYPEINT:
        case TYPEBOOLEAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        PublicFunction();
      }
      jj_consume_token(CLOSECURLYBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if (true)
          return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void PublicFunction() throws ParseException {
    jj_consume_token(PUBLIC);
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case TYPEINT:
    case TYPEBOOLEAN:
    case IDENTIFIER:
      Type();
      MethodDeclaration();
      break;
    case STATIC:
      jj_consume_token(STATIC);
      MainDeclaration();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MethodDeclaration() throws ParseException {
    /* @bgen(jjtree) MethodDeclaration */
    ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.name = t1.image;
      jj_consume_token(PARENTHESISOPEN);
      Arguments();
      jj_consume_token(PARENTHESISCLOSE);
      jj_consume_token(OPENCURLYBRACKET);
      FunctionBody();
      Return();
      jj_consume_token(CLOSECURLYBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {
    /* @bgen(jjtree) MainDeclaration */
    ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(PARENTHESISOPEN);
      jj_consume_token(TYPESTRING);
      jj_consume_token(OPENBRACKET);
      jj_consume_token(CLOSEBRACKET);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(PARENTHESISCLOSE);
      jj_consume_token(OPENCURLYBRACKET);
      FunctionBody();
      jj_consume_token(CLOSECURLYBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Return() throws ParseException {
    /* @bgen(jjtree) Return */
    ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Arguments() throws ParseException {
    /* @bgen(jjtree) Arguments */
    ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case TYPEINT:
      case TYPEBOOLEAN:
      case IDENTIFIER:
        Argument();
        label_3: while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          Argument();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Argument() throws ParseException {
    /* @bgen(jjtree) Argument */
    ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      Type();
      t1 = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.name = t1.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void FunctionBody() throws ParseException {
    /* @bgen(jjtree) FunctionBody */
    ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_4: while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        VarDeclaration();
      }
      label_5: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case INTEGER:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case LOGICNOT:
        case OPENCURLYBRACKET:
        case PARENTHESISOPEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        Statement();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Type() throws ParseException {
    /* @bgen(jjtree) Type */
    ASTType jjtn000 = new ASTType(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case TYPEBOOLEAN:
        jj_consume_token(TYPEBOOLEAN);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.type = "Boolean";
        break;
      case TYPEINT:
        jj_consume_token(TYPEINT);
        jjtn000.type = "int";
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case OPENBRACKET:
          jj_consume_token(OPENBRACKET);
          jj_consume_token(CLOSEBRACKET);
          jjtn000.type = "int[]";
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.type = t1.image;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {
    /* @bgen(jjtree) VarDeclaration */
    ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      Type();
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.identifier = t1.image;
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case OPENCURLYBRACKET:
      jj_consume_token(OPENCURLYBRACKET);
      label_6: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case INTEGER:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case LOGICNOT:
        case OPENCURLYBRACKET:
        case PARENTHESISOPEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(CLOSECURLYBRACKET);
      break;
    case IF:
      If();
      Else();
      break;
    case WHILE:
      While();
      break;
    case INTEGER:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LOGICNOT:
    case PARENTHESISOPEN:
      ExpressionSubset();
      jj_consume_token(SEMICOLON);
      break;
    case IDENTIFIER:
      Assignment();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void If() throws ParseException {
    /* @bgen(jjtree) If */
    ASTIf jjtn000 = new ASTIf(JJTIF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(PARENTHESISOPEN);
      Expression();
      jj_consume_token(PARENTHESISCLOSE);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Else() throws ParseException {
    /* @bgen(jjtree) Else */
    ASTElse jjtn000 = new ASTElse(JJTELSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Assignment() throws ParseException {
    /* @bgen(jjtree) Assignment */
    ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.name = t1.image;
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case EQUAL:
      case SMALLERSIGN:
      case PLUSSIGN:
      case MINUSIGN:
      case TIMESSIGN:
      case DIVIDESIGN:
      case LOGICAND:
      case OPENBRACKET:
      case POINT:
        IdentifierStmt();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void While() throws ParseException {
    /* @bgen(jjtree) While */
    ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTHESISOPEN);
      try {
        Expression();
      } catch (ParseException e) {
        error_skipto(PARENTHESISCLOSE);
      }
      jj_consume_token(PARENTHESISCLOSE);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void IdentifierStmt() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case SMALLERSIGN:
    case PLUSSIGN:
    case MINUSIGN:
    case TIMESSIGN:
    case DIVIDESIGN:
    case LOGICAND:
    case POINT:
      ExpressionLeftSubset();
      break;
    case OPENBRACKET:
      PositionAccess();
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case EQUAL:
        AssignmentLeft();
        break;
      default:
        jj_la1[12] = jj_gen;
        ExpressionLeft();
      }
      break;
    case EQUAL:
      AssignmentLeft();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void PositionAccess() throws ParseException {
    /* @bgen(jjtree) PositionAccess */
    ASTPositionAccess jjtn000 = new ASTPositionAccess(JJTPOSITIONACCESS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      jj_consume_token(OPENBRACKET);
      Expression();
      jj_consume_token(CLOSEBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void AssignmentLeft() throws ParseException {
    /* @bgen(jjtree) AssignmentLeft */
    ASTAssignmentLeft jjtn000 = new ASTAssignmentLeft(JJTASSIGNMENTLEFT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EQUAL);
      Expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void NewObject() throws ParseException {
    /* @bgen(jjtree) NewObject */
    ASTNewObject jjtn000 = new ASTNewObject(JJTNEWOBJECT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case TYPEINT:
        t1 = jj_consume_token(TYPEINT);
        jj_consume_token(OPENBRACKET);
        Expression();
        jj_consume_token(CLOSEBRACKET);
        break;
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(PARENTHESISOPEN);
        jj_consume_token(PARENTHESISCLOSE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.name = t1.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ObjectAttr() throws ParseException {
    /* @bgen(jjtree) ObjectAttr */
    ASTObjectAttr jjtn000 = new ASTObjectAttr(JJTOBJECTATTR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.name = t1.image;
      jj_consume_token(PARENTHESISOPEN);
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case INTEGER:
      case TRUE:
      case FALSE:
      case THIS:
      case NEW:
      case LOGICNOT:
      case PARENTHESISOPEN:
      case IDENTIFIER:
        Expression();
        label_7: while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(PARENTHESISCLOSE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case INTEGER:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case LOGICNOT:
    case PARENTHESISOPEN:
      ExpressionSubset();
      break;
    case IDENTIFIER:
      ExpressionIdent();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpressionIdent() throws ParseException {
    /* @bgen(jjtree) ExpressionIdent */
    ASTExpressionIdent jjtn000 = new ASTExpressionIdent(JJTEXPRESSIONIDENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.name = t1.image;
      ExpressionLeft();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ExpressionSubset() throws ParseException {
    /* @bgen(jjtree) ExpressionSubset */
    ASTExpressionSubset jjtn000 = new ASTExpressionSubset(JJTEXPRESSIONSUBSET);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case INTEGER:
      case TRUE:
      case FALSE:
      case THIS:
      case NEW:
      case LOGICNOT:
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case INTEGER:
          t1 = jj_consume_token(INTEGER);
          ExpressionLeft();
          break;
        case TRUE:
          t1 = jj_consume_token(TRUE);
          ExpressionLeft();
          break;
        case FALSE:
          t1 = jj_consume_token(FALSE);
          ExpressionLeft();
          break;
        case THIS:
          t1 = jj_consume_token(THIS);
          ExpressionLeft();
          break;
        case NEW:
          t1 = jj_consume_token(NEW);
          NewObject();
          ExpressionLeft();
          break;
        case LOGICNOT:
          t1 = jj_consume_token(LOGICNOT);
          Expression();
          ExpressionLeft();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.name = t1.image;
        break;
      case PARENTHESISOPEN:
        jj_consume_token(PARENTHESISOPEN);
        Expression();
        jj_consume_token(PARENTHESISCLOSE);
        ExpressionLeft();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ExpressionLeft() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case SMALLERSIGN:
    case PLUSSIGN:
    case MINUSIGN:
    case TIMESSIGN:
    case DIVIDESIGN:
    case LOGICAND:
    case POINT:
      ExpressionLeftSubset();
      break;
    case OPENBRACKET:
      PositionAccess();
      ExpressionLeft();
      break;
    default:
      jj_la1[20] = jj_gen;
      Empty();
    }
  }

  static final public void ExpressionLeftSubset() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case SMALLERSIGN:
    case PLUSSIGN:
    case MINUSIGN:
    case TIMESSIGN:
    case DIVIDESIGN:
    case LOGICAND:
      Operator();
      Expression();
      break;
    case POINT:
      jj_consume_token(POINT);
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case IDENTIFIER:
        ObjectAttr();
        break;
      case LENGTH:
        Length();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExpressionLeft();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Length() throws ParseException {
    /* @bgen(jjtree) Length */
    ASTLength jjtn000 = new ASTLength(JJTLENGTH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LENGTH);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Operator() throws ParseException {
    /* @bgen(jjtree) Operator */
    ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t1;
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case LOGICAND:
        t1 = jj_consume_token(LOGICAND);
        break;
      case SMALLERSIGN:
        t1 = jj_consume_token(SMALLERSIGN);
        break;
      case PLUSSIGN:
        t1 = jj_consume_token(PLUSSIGN);
        break;
      case MINUSIGN:
        t1 = jj_consume_token(MINUSIGN);
        break;
      case TIMESSIGN:
        t1 = jj_consume_token(TIMESSIGN);
        break;
      case DIVIDESIGN:
        t1 = jj_consume_token(DIVIDESIGN);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.type = t1.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void FirstLevelPrecende() throws ParseException {
    /* @bgen(jjtree) FirstLevelPrecende */
    ASTFirstLevelPrecende jjtn000 = new ASTFirstLevelPrecende(JJTFIRSTLEVELPRECENDE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      SecondLevelPrecende();
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case LOGICAND:
        jj_consume_token(LOGICAND);
        SecondLevelPrecende();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void SecondLevelPrecende() throws ParseException {
    /* @bgen(jjtree) SecondLevelPrecende */
    ASTSecondLevelPrecende jjtn000 = new ASTSecondLevelPrecende(JJTSECONDLEVELPRECENDE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ThirdLevelPrecende();
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case SMALLERSIGN:
        jj_consume_token(SMALLERSIGN);
        ThirdLevelPrecende();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ThirdLevelPrecende() throws ParseException {
    /* @bgen(jjtree) ThirdLevelPrecende */
    ASTThirdLevelPrecende jjtn000 = new ASTThirdLevelPrecende(JJTTHIRDLEVELPRECENDE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      FourthLevelPrecende();
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case PLUSSIGN:
      case MINUSIGN:
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case PLUSSIGN:
          jj_consume_token(PLUSSIGN);
          break;
        case MINUSIGN:
          jj_consume_token(MINUSIGN);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        FourthLevelPrecende();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void FourthLevelPrecende() throws ParseException {
    /* @bgen(jjtree) FourthLevelPrecende */
    ASTFourthLevelPrecende jjtn000 = new ASTFourthLevelPrecende(JJTFOURTHLEVELPRECENDE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case TIMESSIGN:
      case DIVIDESIGN:
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case TIMESSIGN:
          jj_consume_token(TIMESSIGN);
          break;
        case DIVIDESIGN:
          jj_consume_token(DIVIDESIGN);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Expression();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Empty() throws ParseException {

  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_1();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(0, xla);
    }
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(TYPEINT))
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13())
      jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(TYPEBOOLEAN))
      return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
      jj_scanpos = xsp;
      if (jj_3R_11()) {
        jj_scanpos = xsp;
        if (jj_3R_12())
          return true;
      }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_9())
      return true;
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_8())
      return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(OPENBRACKET))
      return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaMMTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 = new int[] { 0x400, 0x2800, 0x4000, 0xa800, 0x0, 0x2800, 0xea80020, 0x0, 0x2800, 0xea80020, 0xea80020,
        0xf0400000, 0x400000, 0xf0400000, 0x800, 0x0, 0xe800020, 0xe800020, 0xe800020, 0xe800020, 0xf0000000, 0x1000000,
        0xf0000000, 0xf0000000, 0x0, 0x10000000, 0x60000000, 0x60000000, 0x80000000, 0x80000000, };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 = new int[] { 0x0, 0x1000, 0x0, 0x1000, 0x400, 0x1000, 0x110c, 0x20, 0x1000, 0x110c, 0x110c, 0x823, 0x0,
        0x823, 0x1000, 0x400, 0x1104, 0x1104, 0x4, 0x104, 0x823, 0x1000, 0x803, 0x3, 0x2, 0x0, 0x0, 0x0, 0x1, 0x1, };
  }

  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaMM(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public JavaMM(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try {
      jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaMM(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaMM(JavaMMTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaMMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen)
              c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {
  }

  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0;
      Token tok = token;
      while (tok != null && tok != jj_scanpos) {
        i++;
        tok = tok.next;
      }
      if (tok != null)
        jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind)
      return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos)
      throw jj_ls;
    return false;
  }

  /** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100)
      return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[]) (it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists)
            break;
        }
      }
      if (!exists)
        jj_expentries.add(jj_expentry);
      if (pos != 0)
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      try {
        JJCalls p = jj_2_rtns[i];
        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_lastpos = jj_scanpos = p.first;
            switch (i) {
            case 0:
              jj_3_1();
              break;
            }
          }
          p = p.next;
        } while (p != null);
      } catch (LookaheadSuccess ls) {
      }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p = p.next = new JJCalls();
        break;
      }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la;
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
